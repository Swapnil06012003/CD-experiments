#include <iostream>
#include <regex>
#include <vector>

// Token types
std::vector<std::pair<std::string, std::string>> tokenTypes = {
    {"KEYWORD", "\\b(int|float|char|if|else|while|for)\\b"},
    {"IDENTIFIER", "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"},
    {"OPERATOR", "[+\\-*/=]"},
    {"LITERAL", "\\b\\d+\\b"},
    {"PUNCTUATION", "[;(),{}]"},
    {"WHITESPACE", "\\s+"}
};

std::vector<std::pair<std::string, std::string>> tokenize(const std::string& code) {
    std::vector<std::pair<std::string, std::string>> tokens;
    std::smatch match;
    std::string::const_iterator position = code.begin();
    std::string::const_iterator end = code.end();

    while (position != end) {
        match = std::smatch();

        for (const auto& tokenType : tokenTypes) {
            const std::string& tokenName = tokenType.first;
            const std::string& pattern = tokenType.second;
            std::regex regex(pattern);

            if (std::regex_search(position, end, match, regex)) {
                std::string value = match.str();
                if (tokenName != "WHITESPACE") {
                    tokens.emplace_back(tokenName, value);
                }
                break;
            }
        }

        if (match.empty()) {
            std::cout << "Invalid token at position " << std::distance(code.begin(), position) << ": " << *position << std::endl;
            ++position;
        } else {
            position = match[0].second;
        }
    }

    return tokens;
}

// Example usage
int main() {
    std::string c_code = R"(
        int main() {
            int x = 10;
            float y = 3.14;
            return 0;
        }
    )";

    std::vector<std::pair<std::string, std::string>> tokens = tokenize(c_code);

    // Print the tokens
    for (const auto& token : tokens) {
        std::cout << token.first << ": " << token.second << std::endl;
    }

    return 0;
}
